"""
Car Search Tool - Herramienta de b√∫squeda de autos
Busca autos en el cat√°logo de Kavak usando criterios espec√≠ficos
"""

import os
from typing import Any, Dict, List, Optional

import pandas as pd
from langchain.tools import tool

from ..config import MEXICAN_CONFIG

# Load car data
CAR_DATA_PATH = os.path.join(
    os.path.dirname(__file__), "../../data/sample_caso_ai_engineer.csv"
)


def load_car_data() -> pd.DataFrame:
    """Carga los datos del cat√°logo de autos"""
    try:
        df = pd.read_csv(CAR_DATA_PATH)
        # Create searchable description for each car
        df["descripcion"] = df.apply(
            lambda row: f"{row['make']} {row['model']} {row['year']} {row['version']} "
            f"- ${row['price']:,.0f}, {row['km']:,} km, "
            f"Bluetooth: {row['bluetooth']}"
            + (f", CarPlay: {row['car_play']}" if pd.notna(row["car_play"]) else ""),
            axis=1,
        )
        return df
    except Exception as e:
        print(f"Error loading car data: {e}")
        return pd.DataFrame()


@tool
def buscar_autos_por_presupuesto(
    presupuesto_maximo: float,
    marca: Optional[str] = None,
    tipo_auto: Optional[str] = None,
) -> str:
    """
    Busca autos en el cat√°logo seg√∫n el presupuesto m√°ximo del cliente.

    Args:
        presupuesto_maximo: Presupuesto m√°ximo en pesos mexicanos
        marca: Marca espec√≠fica (opcional) - ej: Toyota, Nissan, Ford
        tipo_auto: Tipo de auto (opcional) - ej: sedan, SUV, hatchback

    Returns:
        Lista formateada de autos disponibles en espa√±ol
    """
    try:
        df = load_car_data()
        if df.empty:
            return "‚ùå No pude acceder al cat√°logo. ¬øIntentamos de nuevo en un momento?"

        # Filter by budget
        autos_filtrados = df[df["price"] <= presupuesto_maximo]

        # Filter by brand if specified
        if marca:
            marca_clean = marca.strip().title()
            autos_filtrados = autos_filtrados[
                autos_filtrados["make"].str.contains(marca_clean, case=False, na=False)
            ]

        # Sort by price (ascending)
        autos_filtrados = autos_filtrados.sort_values("price")

        if autos_filtrados.empty:
            return f"""
üîç No encontr√© autos con esos criterios.

Algunas opciones:
‚Ä¢ Aumentar el presupuesto a ${presupuesto_maximo + 50000:,.0f}
‚Ä¢ Considerar diferentes marcas
‚Ä¢ Ver autos seminuevos con m√°s kilometraje

¬øTe ayudo con otras opciones? üòä
"""

        # Format top 5 results
        resultados = autos_filtrados.head(5)
        respuesta = f"üöó Encontr√© {len(autos_filtrados)} autos en tu presupuesto de ${presupuesto_maximo:,.0f}:\n\n"

        for idx, auto in resultados.iterrows():
            bluetooth_text = (
                "‚úÖ Bluetooth" if auto["bluetooth"] == "S√≠" else "‚ùå Sin Bluetooth"
            )
            carplay_text = (
                " ‚Ä¢ ‚úÖ CarPlay"
                if pd.notna(auto["car_play"]) and auto["car_play"] == "S√≠"
                else ""
            )

            respuesta += f"""
**{auto['make']} {auto['model']} {auto['year']}**
üí∞ ${auto['price']:,.0f}
üìç {auto['km']:,} km
{bluetooth_text}{carplay_text}
---
"""

        if len(autos_filtrados) > 5:
            respuesta += f"\n¬°Y {len(autos_filtrados)-5} opciones m√°s!\n"

        respuesta += "\n¬øTe interesa alguno en particular? ¬øQuieres m√°s detalles? üòä"

        return respuesta

    except Exception as e:
        return f"‚ùå Error en la b√∫squeda: {str(e)}. ¬øPuedes intentar de nuevo?"


@tool
def buscar_auto_especifico(marca: str, modelo: str) -> str:
    """
    Busca un auto espec√≠fico por marca y modelo.

    Args:
        marca: Marca del auto (ej: Toyota, Nissan, Ford)
        modelo: Modelo del auto (ej: Corolla, Sentra, Focus)

    Returns:
        Informaci√≥n detallada del auto encontrado
    """
    try:
        df = load_car_data()
        if df.empty:
            return "‚ùå No pude acceder al cat√°logo. ¬øIntentamos de nuevo?"

        # Search for specific make and model (case insensitive)
        auto_encontrado = df[
            (df["make"].str.contains(marca, case=False, na=False))
            & (df["model"].str.contains(modelo, case=False, na=False))
        ]

        if auto_encontrado.empty:
            # Try fuzzy matching for common typos
            auto_encontrado = buscar_con_fuzzy_matching(df, marca, modelo)

        if auto_encontrado.empty:
            return f"""
üîç No encontr√© "{marca} {modelo}" en nuestro cat√°logo.

¬øQuiz√°s te refieres a:
‚Ä¢ {sugerir_marcas_similares(df, marca)}
‚Ä¢ {sugerir_modelos_similares(df, modelo)}

¬øPuedes verificar el nombre? ü§î
"""

        # Show all available versions of this car
        auto_encontrado = auto_encontrado.sort_values("price")
        respuesta = f"üöó Encontr√© **{marca.title()} {modelo.title()}** disponible:\n\n"

        for idx, auto in auto_encontrado.iterrows():
            bluetooth_icon = "‚úÖ" if auto["bluetooth"] == "S√≠" else "‚ùå"
            carplay_icon = (
                "‚úÖ"
                if pd.notna(auto["car_play"]) and auto["car_play"] == "S√≠"
                else "‚ùå"
            )

            respuesta += f"""
**{auto['make']} {auto['model']} {auto['year']}**
{auto['version']}
üí∞ ${auto['price']:,.0f}
üìç {auto['km']:,} km
{bluetooth_icon} Bluetooth ‚Ä¢ {carplay_icon} CarPlay
Stock ID: {auto['stock_id']}
---
"""

        respuesta += (
            "\n¬øTe interesa alguna versi√≥n? ¬øQuieres calcular financiamiento? üí∞"
        )

        return respuesta

    except Exception as e:
        return f"‚ùå Error en la b√∫squeda: {str(e)}. ¬øPuedes intentar de nuevo?"


def buscar_con_fuzzy_matching(
    df: pd.DataFrame, marca: str, modelo: str
) -> pd.DataFrame:
    """B√∫squeda con tolerancia a errores tipogr√°ficos"""
    # Common typos in Mexican car market
    typo_corrections = {
        "nisan": "nissan",
        "toyoya": "toyota",
        "ford": "ford",
        "chevrolet": "chevrolet",
        "volkswagen": "volkswagen",
        "honda": "honda",
    }

    marca_corregida = typo_corrections.get(marca.lower(), marca)

    return df[
        (df["make"].str.contains(marca_corregida, case=False, na=False))
        & (df["model"].str.contains(modelo, case=False, na=False))
    ]


def sugerir_marcas_similares(df: pd.DataFrame, marca: str) -> str:
    """Sugiere marcas similares disponibles"""
    marcas_disponibles = df["make"].unique()[:5]
    return ", ".join(marcas_disponibles)


def sugerir_modelos_similares(df: pd.DataFrame, modelo: str) -> str:
    """Sugiere modelos similares disponibles"""
    modelos_disponibles = df["model"].unique()[:5]
    return ", ".join(modelos_disponibles)


@tool
def obtener_autos_populares() -> str:
    """
    Muestra los autos m√°s populares en el cat√°logo de Kavak.

    Returns:
        Lista de autos m√°s populares con precios
    """
    try:
        df = load_car_data()
        if df.empty:
            return "‚ùå No pude acceder al cat√°logo."

        # Get most common makes
        marcas_populares = df["make"].value_counts().head(5)

        respuesta = (
            f"{MEXICAN_CONFIG['emojis']['car']} **Autos m√°s populares en Kavak:**\n\n"
        )

        for marca, cantidad in marcas_populares.items():
            auto_ejemplo = df[df["make"] == marca].sort_values("price").iloc[0]
            respuesta += f"""
**{marca}** ({cantidad} disponibles)
Desde ${auto_ejemplo['price']:,.0f}
Ejemplo: {auto_ejemplo['model']} {auto_ejemplo['year']}
---
"""

        respuesta += "\n¬øTe interesa alguna marca en particular? üòä"

        return respuesta

    except Exception as e:
        return "‚ùå Error obteniendo autos populares. ¬øIntentamos de nuevo?"
